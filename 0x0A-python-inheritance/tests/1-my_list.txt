Checking for module docstring:
	>>> module_doc = __import__("1-my_list").__doc__
	>>> len(module_doc) > 1
	True

Checking for class docstring:
	>>> class_doc = __import__("1-my_list").MyList.__doc__
	>>> len(class_doc) > 1
	True

Checking for method docstring:
	>>> method_doc = __import__("1-my_list").MyList.print_sorted.__doc__
	>>> len(method_doc) > 1
	True

Checking that MyList inherits from list:
	>>> issubclass(MyList, list)
	True
	
Checking for empty list:
	>>> my_list = MyList()
	>>> my_list.print_sorted()
	[]

Checking for list already in correct order
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(4)
	>>> print(l)
	[1, 2, 3, 4]

Checing for list already in correct order:
	>>> my_list.print_sorted()
	[1, 2, 3, 4]

Checking for reversed order list:
	>>> my_list = MyList()
	>>> my_list.append(4)
	>>> my_list.append(3)
	>>> my_list.append(2)
	>>> my_list.append(1)
	>>> print(my_list)
	[4, 3, 2, 1]
	>>> my_list.print_sorted()
	[1, 2, 3, 4]
	>>> print(my_list)
	[4, 3, 2, 1]
	
Checking for negative numbers:
	>>> my_list = MyList()
	>>> my_list.append(-4)
	>>> my_list.append(-1)
	>>> my_list.append(-2)
	>>> my_list.append(3)
	>>> print(my_list)
	[-4, -1, -2, 3]
	>>> my_list.print_sorted()
	>>> [-4, -2, -1, 3]
	>>> print(my_list)
	[-4, -1, -2, 3]

Checking for too many arguments:
	>>> my_list = MyList(1)
	Traceback (most recent call last):
	...
	TypeError: print_sorted() takes 1 positional argument but 2 were given
	
Checking for parent object:
	>>> my = [4, 3, 1, 2]
	>>> my_list.print_sorted()
	Traceback (most recent call last):
		File "<stdin>", line 1, in <module>
	AttributeError: "list" object has no attribute "print_sorted"
